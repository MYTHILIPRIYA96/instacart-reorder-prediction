# Project Documentation: Deep Learning-Based Reorder Prediction

## Overview

This project aims to build a binary classification model using deep learning to predict whether a user will reorder a product,
based on tabular features derived from the Instacart Orders dataset.

## Assumptions

* Users are likely to reorder products they previously purchased.
* Product reordering depends on both user behavior and product characteristics.
* Tabular data, when properly engineered, can be effectively modeled with deep learning.

## Data Loading and Preprocessing

### 1. Load Labels in Chunks

'''python
for chunk in pd.read_csv(labels_path, chunksize=500000, ...):
    chunk['reordered'] = chunk['reordered'].fillna(0).astype('int8')
'''

**Purpose** 

Efficiently load large training label files by chunks and fill missing `reordered` values with 0.

### 2. Merge Features with Labels

'''python
for chunk in features_iter:
    chunk = chunk.merge(train_labels, on=['user_id', 'product_id'], how='left')
'''

**Purpose** 

Align features with correct labels, marking missing ones as not reordered.

### 3. Handle Missing Values

'''python
features[col] = features[col].fillna(mode_val/median_val)
'''

**Purpose:** 

Fill missing categorical values with mode and numerical with median.

### 4. Encode Categorical Variables

'''python
features[col] = LabelEncoder().fit_transform(features[col])
'''

**Purpose:** 

Transform strings to numeric labels for modeling.

### 5. Normalize Numerical Features

'''python
features[numerical_columns] = StandardScaler().fit_transform(features[numerical_columns])
'''

**Purpose:**

Standardize numeric columns for better convergence during training.

## Feature Description

### Categorical Features

* 'product_name', 'aisle', 'department'
* 'user_order_dow_mode', 'user_order_hour_mode'
* 'product_dow_mode', 'product_order_hour_mode'

### Numerical Features

* User behavior: 'total_orders', 'avg_days_between_orders', 'user_reorder_ratio'
* Product stats: 'total_times_ordered', 'reorder_rate', 'product_avg_days_between_orders'
* User-product interactions: 'times_user_ordered_product', 'user_product_order_rate'

## Sampling and Balancing

'''python
df_majority_downsampled = features[features.reordered == 0].sample(n=200_000)
df_minority = features[features.reordered == 1)
'''

**Purpose:** Address class imbalance by downsampling and applying SMOTE.


## Model Architecture: Feedforward Neural Network (FFNN)

'''python
model = Sequential([
    Input(shape=(X_train.shape[1],)),
    Dense(128, activation='relu'),
    BatchNormalization(),
    Dropout(0.3),
    Dense(64, activation='relu'),
    BatchNormalization(),
    Dropout(0.3),
    Dense(1, activation='sigmoid')
])
'''

### Configuration

* **Optimizer:** Adam (lr=0.001)
* **Loss:** Binary Crossentropy
* **Regularization:** Dropout (0.3), BatchNorm
* **Output:** Sigmoid for binary classification

## Training Strategy

'''python
model.fit(..., callbacks=[EarlyStopping(...), ReduceLROnPlateau(...)])
'''

**Purpose:** Prevent overfitting and reduce learning rate on validation loss plateau.

## Evaluation Metrics

'''python
thresholds = np.arange(0.1, 0.9, 0.01)
'''

* Optimal threshold is selected based on **F1 Score**.

### Metrics Reported:

* Accuracy
* Precision
* Recall
* F1 Score
* ROC-AUC

### Confusion Matrix

Visualized using 'seaborn.heatmap()'to show classification performance.

## Outputs

* Preprocessed file: 'preprocessed_features.csv'
* Trained model: 'ffnn_model.h5'


## Conclusion

This project demonstrates how deep learning models can be applied effectively to structured data when supported by solid feature engineering and preprocessing strategies. The combination of SMOTE, balanced datasets, and a carefully tuned FFNN provides a strong baseline for reorder prediction tasks.
